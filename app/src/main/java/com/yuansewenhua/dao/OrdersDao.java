package com.yuansewenhua.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.yuansewenhua.dao.Orders;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDERS.
*/
public class OrdersDao extends AbstractDao<Orders, Long> {

    public static final String TABLENAME = "ORDERS";

    /**
     * Properties of entity Orders.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Createdate = new Property(1, java.util.Date.class, "createdate", false, "CREATEDATE");
        public final static Property Status = new Property(2, String.class, "status", false, "STATUS");
        public final static Property Createtime = new Property(3, java.util.Date.class, "createtime", false, "CREATETIME");
        public final static Property Paydate = new Property(4, java.util.Date.class, "paydate", false, "PAYDATE");
        public final static Property Paytime = new Property(5, java.util.Date.class, "paytime", false, "PAYTIME");
        public final static Property Tablenumber = new Property(6, Integer.class, "tablenumber", false, "TABLENUMBER");
        public final static Property Fromwitchpad = new Property(7, String.class, "fromwitchpad", false, "FROMWITCHPAD");
        public final static Property Waitername = new Property(8, String.class, "waitername", false, "WAITERNAME");
        public final static Property Pricecount = new Property(9, String.class, "pricecount", false, "PRICECOUNT");
        public final static Property Memo = new Property(10, String.class, "memo", false, "MEMO");
        public final static Property Peoplenumber = new Property(11, Integer.class, "peoplenumber", false, "PEOPLENUMBER");
        public final static Property Orderod = new Property(12, Long.class, "orderod", false, "ORDEROD");
    };

    private Query<Orders> porelationships_OrdersListQuery;

    public OrdersDao(DaoConfig config) {
        super(config);
    }
    
    public OrdersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDERS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CREATEDATE' INTEGER," + // 1: createdate
                "'STATUS' TEXT," + // 2: status
                "'CREATETIME' INTEGER," + // 3: createtime
                "'PAYDATE' INTEGER," + // 4: paydate
                "'PAYTIME' INTEGER," + // 5: paytime
                "'TABLENUMBER' INTEGER," + // 6: tablenumber
                "'FROMWITCHPAD' TEXT," + // 7: fromwitchpad
                "'WAITERNAME' TEXT," + // 8: waitername
                "'PRICECOUNT' TEXT," + // 9: pricecount
                "'MEMO' TEXT," + // 10: memo
                "'PEOPLENUMBER' INTEGER," + // 11: peoplenumber
                "'ORDEROD' INTEGER);"); // 12: orderod
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Orders entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date createdate = entity.getCreatedate();
        if (createdate != null) {
            stmt.bindLong(2, createdate.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(4, createtime.getTime());
        }
 
        java.util.Date paydate = entity.getPaydate();
        if (paydate != null) {
            stmt.bindLong(5, paydate.getTime());
        }
 
        java.util.Date paytime = entity.getPaytime();
        if (paytime != null) {
            stmt.bindLong(6, paytime.getTime());
        }
 
        Integer tablenumber = entity.getTablenumber();
        if (tablenumber != null) {
            stmt.bindLong(7, tablenumber);
        }
 
        String fromwitchpad = entity.getFromwitchpad();
        if (fromwitchpad != null) {
            stmt.bindString(8, fromwitchpad);
        }
 
        String waitername = entity.getWaitername();
        if (waitername != null) {
            stmt.bindString(9, waitername);
        }
 
        String pricecount = entity.getPricecount();
        if (pricecount != null) {
            stmt.bindString(10, pricecount);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(11, memo);
        }
 
        Integer peoplenumber = entity.getPeoplenumber();
        if (peoplenumber != null) {
            stmt.bindLong(12, peoplenumber);
        }
 
        Long orderod = entity.getOrderod();
        if (orderod != null) {
            stmt.bindLong(13, orderod);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Orders readEntity(Cursor cursor, int offset) {
        Orders entity = new Orders( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createdate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // status
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createtime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // paydate
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // paytime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // tablenumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fromwitchpad
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // waitername
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pricecount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // memo
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // peoplenumber
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // orderod
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Orders entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatetime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setPaydate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPaytime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTablenumber(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFromwitchpad(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWaitername(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPricecount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMemo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPeoplenumber(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOrderod(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Orders entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Orders entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ordersList" to-many relationship of Porelationships. */
    public List<Orders> _queryPorelationships_OrdersList(Long orderod) {
        synchronized (this) {
            if (porelationships_OrdersListQuery == null) {
                QueryBuilder<Orders> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Orderod.eq(null));
                porelationships_OrdersListQuery = queryBuilder.build();
            }
        }
        Query<Orders> query = porelationships_OrdersListQuery.forCurrentThread();
        query.setParameter(0, orderod);
        return query.list();
    }

}
