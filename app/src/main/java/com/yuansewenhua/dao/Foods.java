package com.yuansewenhua.dao;

import com.yuansewenhua.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FOODS.
 */
public class Foods {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String price;
    /** Not-null value. */
    private String smallimagepath;
    /** Not-null value. */
    private String bigimagepath;
    /** Not-null value. */
    private String yongliao;
    /** Not-null value. */
    private String flavour;
    private String memo;
    private Boolean issu;
    private Boolean isliang;
    private Boolean isqingzhen;
    private String clickcount;
    private boolean isenable;
    private String typetitle;
    private Long foodstypeid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FoodsDao myDao;

    private Foodstype foodstype;
    private Long foodstype__resolvedKey;


    public Foods() {
    }

    public Foods(Long id) {
        this.id = id;
    }

    public Foods(Long id, String name, String price, String smallimagepath, String bigimagepath, String yongliao, String flavour, String memo, Boolean issu, Boolean isliang, Boolean isqingzhen, String clickcount, boolean isenable, String typetitle, Long foodstypeid) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.smallimagepath = smallimagepath;
        this.bigimagepath = bigimagepath;
        this.yongliao = yongliao;
        this.flavour = flavour;
        this.memo = memo;
        this.issu = issu;
        this.isliang = isliang;
        this.isqingzhen = isqingzhen;
        this.clickcount = clickcount;
        this.isenable = isenable;
        this.typetitle = typetitle;
        this.foodstypeid = foodstypeid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFoodsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(String price) {
        this.price = price;
    }

    /** Not-null value. */
    public String getSmallimagepath() {
        return smallimagepath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSmallimagepath(String smallimagepath) {
        this.smallimagepath = smallimagepath;
    }

    /** Not-null value. */
    public String getBigimagepath() {
        return bigimagepath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBigimagepath(String bigimagepath) {
        this.bigimagepath = bigimagepath;
    }

    /** Not-null value. */
    public String getYongliao() {
        return yongliao;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setYongliao(String yongliao) {
        this.yongliao = yongliao;
    }

    /** Not-null value. */
    public String getFlavour() {
        return flavour;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setFlavour(String flavour) {
        this.flavour = flavour;
    }

    public String getMemo() {
        return memo;
    }

    public void setMemo(String memo) {
        this.memo = memo;
    }

    public Boolean getIssu() {
        return issu;
    }

    public void setIssu(Boolean issu) {
        this.issu = issu;
    }

    public Boolean getIsliang() {
        return isliang;
    }

    public void setIsliang(Boolean isliang) {
        this.isliang = isliang;
    }

    public Boolean getIsqingzhen() {
        return isqingzhen;
    }

    public void setIsqingzhen(Boolean isqingzhen) {
        this.isqingzhen = isqingzhen;
    }

    public String getClickcount() {
        return clickcount;
    }

    public void setClickcount(String clickcount) {
        this.clickcount = clickcount;
    }

    public boolean getIsenable() {
        return isenable;
    }

    public void setIsenable(boolean isenable) {
        this.isenable = isenable;
    }

    public String getTypetitle() {
        return typetitle;
    }

    public void setTypetitle(String typetitle) {
        this.typetitle = typetitle;
    }

    public Long getFoodstypeid() {
        return foodstypeid;
    }

    public void setFoodstypeid(Long foodstypeid) {
        this.foodstypeid = foodstypeid;
    }

    /** To-one relationship, resolved on first access. */
    public Foodstype getFoodstype() {
        Long __key = this.foodstypeid;
        if (foodstype__resolvedKey == null || !foodstype__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FoodstypeDao targetDao = daoSession.getFoodstypeDao();
            Foodstype foodstypeNew = targetDao.load(__key);
            synchronized (this) {
                foodstype = foodstypeNew;
            	foodstype__resolvedKey = __key;
            }
        }
        return foodstype;
    }

    public void setFoodstype(Foodstype foodstype) {
        synchronized (this) {
            this.foodstype = foodstype;
            foodstypeid = foodstype == null ? null : foodstype.getId();
            foodstype__resolvedKey = foodstypeid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
