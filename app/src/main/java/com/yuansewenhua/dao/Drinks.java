package com.yuansewenhua.dao;

import com.yuansewenhua.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DRINKS.
 */
public class Drinks {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String smallimagepath;
    /** Not-null value. */
    private String bigimagepath;
    private Boolean cancold;
    private Boolean canhot;
    private Boolean havesugar;
    private String clickcount;
    private Long drinkstypeid;
    private Boolean isenable;
    private String typetitle;
    /** Not-null value. */
    private String price;
    private String sellunit;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DrinksDao myDao;

    private Drinkstype drinkstype;
    private Long drinkstype__resolvedKey;


    public Drinks() {
    }

    public Drinks(Long id) {
        this.id = id;
    }

    public Drinks(Long id, String name, String smallimagepath, String bigimagepath, Boolean cancold, Boolean canhot, Boolean havesugar, String clickcount, Long drinkstypeid, Boolean isenable, String typetitle, String price, String sellunit) {
        this.id = id;
        this.name = name;
        this.smallimagepath = smallimagepath;
        this.bigimagepath = bigimagepath;
        this.cancold = cancold;
        this.canhot = canhot;
        this.havesugar = havesugar;
        this.clickcount = clickcount;
        this.drinkstypeid = drinkstypeid;
        this.isenable = isenable;
        this.typetitle = typetitle;
        this.price = price;
        this.sellunit = sellunit;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDrinksDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getSmallimagepath() {
        return smallimagepath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSmallimagepath(String smallimagepath) {
        this.smallimagepath = smallimagepath;
    }

    /** Not-null value. */
    public String getBigimagepath() {
        return bigimagepath;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBigimagepath(String bigimagepath) {
        this.bigimagepath = bigimagepath;
    }

    public Boolean getCancold() {
        return cancold;
    }

    public void setCancold(Boolean cancold) {
        this.cancold = cancold;
    }

    public Boolean getCanhot() {
        return canhot;
    }

    public void setCanhot(Boolean canhot) {
        this.canhot = canhot;
    }

    public Boolean getHavesugar() {
        return havesugar;
    }

    public void setHavesugar(Boolean havesugar) {
        this.havesugar = havesugar;
    }

    public String getClickcount() {
        return clickcount;
    }

    public void setClickcount(String clickcount) {
        this.clickcount = clickcount;
    }

    public Long getDrinkstypeid() {
        return drinkstypeid;
    }

    public void setDrinkstypeid(Long drinkstypeid) {
        this.drinkstypeid = drinkstypeid;
    }

    public Boolean getIsenable() {
        return isenable;
    }

    public void setIsenable(Boolean isenable) {
        this.isenable = isenable;
    }

    public String getTypetitle() {
        return typetitle;
    }

    public void setTypetitle(String typetitle) {
        this.typetitle = typetitle;
    }

    /** Not-null value. */
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(String price) {
        this.price = price;
    }

    public String getSellunit() {
        return sellunit;
    }

    public void setSellunit(String sellunit) {
        this.sellunit = sellunit;
    }

    /** To-one relationship, resolved on first access. */
    public Drinkstype getDrinkstype() {
        Long __key = this.drinkstypeid;
        if (drinkstype__resolvedKey == null || !drinkstype__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DrinkstypeDao targetDao = daoSession.getDrinkstypeDao();
            Drinkstype drinkstypeNew = targetDao.load(__key);
            synchronized (this) {
                drinkstype = drinkstypeNew;
            	drinkstype__resolvedKey = __key;
            }
        }
        return drinkstype;
    }

    public void setDrinkstype(Drinkstype drinkstype) {
        synchronized (this) {
            this.drinkstype = drinkstype;
            drinkstypeid = drinkstype == null ? null : drinkstype.getId();
            drinkstype__resolvedKey = drinkstypeid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
