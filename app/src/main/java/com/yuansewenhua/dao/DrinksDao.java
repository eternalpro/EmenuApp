package com.yuansewenhua.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.yuansewenhua.dao.Drinks;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DRINKS.
*/
public class DrinksDao extends AbstractDao<Drinks, Long> {

    public static final String TABLENAME = "DRINKS";

    /**
     * Properties of entity Drinks.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Smallimagepath = new Property(2, String.class, "smallimagepath", false, "SMALLIMAGEPATH");
        public final static Property Bigimagepath = new Property(3, String.class, "bigimagepath", false, "BIGIMAGEPATH");
        public final static Property Cancold = new Property(4, Boolean.class, "cancold", false, "CANCOLD");
        public final static Property Canhot = new Property(5, Boolean.class, "canhot", false, "CANHOT");
        public final static Property Havesugar = new Property(6, Boolean.class, "havesugar", false, "HAVESUGAR");
        public final static Property Clickcount = new Property(7, String.class, "clickcount", false, "CLICKCOUNT");
        public final static Property Drinkstypeid = new Property(8, Long.class, "drinkstypeid", false, "DRINKSTYPEID");
        public final static Property Isenable = new Property(9, Boolean.class, "isenable", false, "ISENABLE");
        public final static Property Typetitle = new Property(10, String.class, "typetitle", false, "TYPETITLE");
        public final static Property Price = new Property(11, String.class, "price", false, "PRICE");
        public final static Property Sellunit = new Property(12, String.class, "sellunit", false, "SELLUNIT");
    };

    private DaoSession daoSession;


    public DrinksDao(DaoConfig config) {
        super(config);
    }
    
    public DrinksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DRINKS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'SMALLIMAGEPATH' TEXT NOT NULL ," + // 2: smallimagepath
                "'BIGIMAGEPATH' TEXT NOT NULL ," + // 3: bigimagepath
                "'CANCOLD' INTEGER," + // 4: cancold
                "'CANHOT' INTEGER," + // 5: canhot
                "'HAVESUGAR' INTEGER," + // 6: havesugar
                "'CLICKCOUNT' TEXT," + // 7: clickcount
                "'DRINKSTYPEID' INTEGER," + // 8: drinkstypeid
                "'ISENABLE' INTEGER," + // 9: isenable
                "'TYPETITLE' TEXT," + // 10: typetitle
                "'PRICE' TEXT NOT NULL ," + // 11: price
                "'SELLUNIT' TEXT);"); // 12: sellunit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DRINKS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Drinks entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getSmallimagepath());
        stmt.bindString(4, entity.getBigimagepath());
 
        Boolean cancold = entity.getCancold();
        if (cancold != null) {
            stmt.bindLong(5, cancold ? 1l: 0l);
        }
 
        Boolean canhot = entity.getCanhot();
        if (canhot != null) {
            stmt.bindLong(6, canhot ? 1l: 0l);
        }
 
        Boolean havesugar = entity.getHavesugar();
        if (havesugar != null) {
            stmt.bindLong(7, havesugar ? 1l: 0l);
        }
 
        String clickcount = entity.getClickcount();
        if (clickcount != null) {
            stmt.bindString(8, clickcount);
        }
 
        Long drinkstypeid = entity.getDrinkstypeid();
        if (drinkstypeid != null) {
            stmt.bindLong(9, drinkstypeid);
        }
 
        Boolean isenable = entity.getIsenable();
        if (isenable != null) {
            stmt.bindLong(10, isenable ? 1l: 0l);
        }
 
        String typetitle = entity.getTypetitle();
        if (typetitle != null) {
            stmt.bindString(11, typetitle);
        }
        stmt.bindString(12, entity.getPrice());
 
        String sellunit = entity.getSellunit();
        if (sellunit != null) {
            stmt.bindString(13, sellunit);
        }
    }

    @Override
    protected void attachEntity(Drinks entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Drinks readEntity(Cursor cursor, int offset) {
        Drinks entity = new Drinks( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // smallimagepath
            cursor.getString(offset + 3), // bigimagepath
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // cancold
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // canhot
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // havesugar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // clickcount
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // drinkstypeid
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isenable
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // typetitle
            cursor.getString(offset + 11), // price
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // sellunit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Drinks entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setSmallimagepath(cursor.getString(offset + 2));
        entity.setBigimagepath(cursor.getString(offset + 3));
        entity.setCancold(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCanhot(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setHavesugar(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setClickcount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDrinkstypeid(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsenable(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setTypetitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrice(cursor.getString(offset + 11));
        entity.setSellunit(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Drinks entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Drinks entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDrinkstypeDao().getAllColumns());
            builder.append(" FROM DRINKS T");
            builder.append(" LEFT JOIN DRINKSTYPE T0 ON T.'DRINKSTYPEID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Drinks loadCurrentDeep(Cursor cursor, boolean lock) {
        Drinks entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Drinkstype drinkstype = loadCurrentOther(daoSession.getDrinkstypeDao(), cursor, offset);
        entity.setDrinkstype(drinkstype);

        return entity;    
    }

    public Drinks loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Drinks> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Drinks> list = new ArrayList<Drinks>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Drinks> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Drinks> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
